{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Chapter 1 – The Machine Learning landscape**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Code example 1-1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {
    "slideshow": {
     "slide_type": "-"
    }
   },
   "outputs": [],
   "source": [
    "import sys\n",
    "import sklearn\n",
    "import os\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import sklearn.linear_model\n",
    "\n",
    "\n",
    "assert sys.version_info >= (3, 5) # Python ≥3.5 is required\n",
    "assert sklearn.__version__ >= \"0.20\" # Scikit-Learn ≥0.20 is required\n",
    "\n",
    "\n",
    "# To plot pretty figures directly within Jupyter\n",
    "#Provided you are running IPython, \n",
    "#the %matplotlib inline will make your plot outputs appear and be stored within the notebook.\n",
    "%matplotlib inline    \n",
    "mpl.rc('axes', labelsize=14)\n",
    "mpl.rc('xtick', labelsize=12)\n",
    "mpl.rc('ytick', labelsize=12)\n",
    "\n",
    "np.random.seed(42)\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Where to save the figures\n",
    "PROJECT_ROOT_DIR = \".\"\n",
    "CHAPTER_ID = \"fundamentals\"\n",
    "IMAGES_PATH = os.path.join(PROJECT_ROOT_DIR, \"images\", CHAPTER_ID)\n",
    "os.makedirs(IMAGES_PATH, exist_ok=True)\n",
    "\n",
    "def save_fig(fig_id, tight_layout=True, fig_extension=\"png\", resolution=300):\n",
    "    path = os.path.join(IMAGES_PATH, fig_id + \".\" + fig_extension)\n",
    "    print(\"Saving figure\", fig_id)\n",
    "    if tight_layout:\n",
    "        plt.tight_layout()\n",
    "    plt.savefig(path, format=fig_extension, dpi=resolution)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "datasets/lifesat/\n"
     ]
    }
   ],
   "source": [
    "datapath = os.path.join(\"datasets\", \"lifesat\", \"\")\n",
    "print (datapath)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Indicator</th>\n",
       "      <th>Air pollution</th>\n",
       "      <th>Assault rate</th>\n",
       "      <th>Consultation on rule-making</th>\n",
       "      <th>Dwellings without basic facilities</th>\n",
       "      <th>Educational attainment</th>\n",
       "      <th>Employees working very long hours</th>\n",
       "      <th>Employment rate</th>\n",
       "      <th>Homicide rate</th>\n",
       "      <th>Household net adjusted disposable income</th>\n",
       "      <th>Household net financial wealth</th>\n",
       "      <th>...</th>\n",
       "      <th>Long-term unemployment rate</th>\n",
       "      <th>Personal earnings</th>\n",
       "      <th>Quality of support network</th>\n",
       "      <th>Rooms per person</th>\n",
       "      <th>Self-reported health</th>\n",
       "      <th>Student skills</th>\n",
       "      <th>Time devoted to leisure and personal care</th>\n",
       "      <th>Voter turnout</th>\n",
       "      <th>Water quality</th>\n",
       "      <th>Years in education</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Country</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Australia</th>\n",
       "      <td>13.0</td>\n",
       "      <td>2.1</td>\n",
       "      <td>10.5</td>\n",
       "      <td>1.1</td>\n",
       "      <td>76.0</td>\n",
       "      <td>14.02</td>\n",
       "      <td>72.0</td>\n",
       "      <td>0.8</td>\n",
       "      <td>31588.0</td>\n",
       "      <td>47657.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.08</td>\n",
       "      <td>50449.0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>85.0</td>\n",
       "      <td>512.0</td>\n",
       "      <td>14.41</td>\n",
       "      <td>93.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>19.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Austria</th>\n",
       "      <td>27.0</td>\n",
       "      <td>3.4</td>\n",
       "      <td>7.1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>83.0</td>\n",
       "      <td>7.61</td>\n",
       "      <td>72.0</td>\n",
       "      <td>0.4</td>\n",
       "      <td>31173.0</td>\n",
       "      <td>49887.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.19</td>\n",
       "      <td>45199.0</td>\n",
       "      <td>89.0</td>\n",
       "      <td>1.6</td>\n",
       "      <td>69.0</td>\n",
       "      <td>500.0</td>\n",
       "      <td>14.46</td>\n",
       "      <td>75.0</td>\n",
       "      <td>94.0</td>\n",
       "      <td>17.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Indicator  Air pollution  Assault rate  Consultation on rule-making  \\\n",
       "Country                                                               \n",
       "Australia           13.0           2.1                         10.5   \n",
       "Austria             27.0           3.4                          7.1   \n",
       "\n",
       "Indicator  Dwellings without basic facilities  Educational attainment  \\\n",
       "Country                                                                 \n",
       "Australia                                 1.1                    76.0   \n",
       "Austria                                   1.0                    83.0   \n",
       "\n",
       "Indicator  Employees working very long hours  Employment rate  Homicide rate  \\\n",
       "Country                                                                        \n",
       "Australia                              14.02             72.0            0.8   \n",
       "Austria                                 7.61             72.0            0.4   \n",
       "\n",
       "Indicator  Household net adjusted disposable income  \\\n",
       "Country                                               \n",
       "Australia                                   31588.0   \n",
       "Austria                                     31173.0   \n",
       "\n",
       "Indicator  Household net financial wealth  ...  Long-term unemployment rate  \\\n",
       "Country                                    ...                                \n",
       "Australia                         47657.0  ...                         1.08   \n",
       "Austria                           49887.0  ...                         1.19   \n",
       "\n",
       "Indicator  Personal earnings  Quality of support network  Rooms per person  \\\n",
       "Country                                                                      \n",
       "Australia            50449.0                        92.0               2.3   \n",
       "Austria              45199.0                        89.0               1.6   \n",
       "\n",
       "Indicator  Self-reported health  Student skills  \\\n",
       "Country                                           \n",
       "Australia                  85.0           512.0   \n",
       "Austria                    69.0           500.0   \n",
       "\n",
       "Indicator  Time devoted to leisure and personal care  Voter turnout  \\\n",
       "Country                                                               \n",
       "Australia                                      14.41           93.0   \n",
       "Austria                                        14.46           75.0   \n",
       "\n",
       "Indicator  Water quality  Years in education  \n",
       "Country                                       \n",
       "Australia           91.0                19.4  \n",
       "Austria             94.0                17.0  \n",
       "\n",
       "[2 rows x 24 columns]"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "oecd_bli = pd.read_csv(datapath + \"oecd_bli_2015.csv\", thousands=',')\n",
    "oecd_bli = oecd_bli[oecd_bli[\"INEQUALITY\"]==\"TOT\"]\n",
    "oecd_bli = oecd_bli.pivot(index=\"Country\", columns=\"Indicator\", values=\"Value\")\n",
    "oecd_bli.head(2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Country\n",
       "Australia    7.3\n",
       "Austria      6.9\n",
       "Belgium      6.9\n",
       "Brazil       7.0\n",
       "Canada       7.3\n",
       "Name: Life satisfaction, dtype: float64"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "oecd_bli[\"Life satisfaction\"].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Subject Descriptor</th>\n",
       "      <th>Units</th>\n",
       "      <th>Scale</th>\n",
       "      <th>Country/Series-specific Notes</th>\n",
       "      <th>GDP per capita</th>\n",
       "      <th>Estimates Start After</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Country</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Afghanistan</th>\n",
       "      <td>Gross domestic product per capita, current prices</td>\n",
       "      <td>U.S. dollars</td>\n",
       "      <td>Units</td>\n",
       "      <td>See notes for:  Gross domestic product, curren...</td>\n",
       "      <td>599.994</td>\n",
       "      <td>2013.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Albania</th>\n",
       "      <td>Gross domestic product per capita, current prices</td>\n",
       "      <td>U.S. dollars</td>\n",
       "      <td>Units</td>\n",
       "      <td>See notes for:  Gross domestic product, curren...</td>\n",
       "      <td>3995.383</td>\n",
       "      <td>2010.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            Subject Descriptor         Units  \\\n",
       "Country                                                                        \n",
       "Afghanistan  Gross domestic product per capita, current prices  U.S. dollars   \n",
       "Albania      Gross domestic product per capita, current prices  U.S. dollars   \n",
       "\n",
       "             Scale                      Country/Series-specific Notes  \\\n",
       "Country                                                                 \n",
       "Afghanistan  Units  See notes for:  Gross domestic product, curren...   \n",
       "Albania      Units  See notes for:  Gross domestic product, curren...   \n",
       "\n",
       "             GDP per capita  Estimates Start After  \n",
       "Country                                             \n",
       "Afghanistan         599.994                 2013.0  \n",
       "Albania            3995.383                 2010.0  "
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gdp_per_capita = pd.read_csv(datapath+\"gdp_per_capita.csv\", thousands=',', delimiter='\\t', encoding='latin1', na_values=\"n/a\")\n",
    "gdp_per_capita.rename(columns={\"2015\": \"GDP per capita\"}, inplace=True)\n",
    "gdp_per_capita.set_index(\"Country\", inplace=True)\n",
    "gdp_per_capita.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Country\n",
       "Brazil     7.0\n",
       "Mexico     6.7\n",
       "Russia     6.0\n",
       "Turkey     5.6\n",
       "Hungary    4.9\n",
       "Name: Life satisfaction, dtype: float64"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "full_country_stats = pd.merge(left=oecd_bli, right=gdp_per_capita, left_index=True, right_index=True)\n",
    "full_country_stats.sort_values(by=\"GDP per capita\", inplace=True)\n",
    "full_country_stats\n",
    "full_country_stats[\"Life satisfaction\"].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GDP per capita       55805.204\n",
       "Life satisfaction        7.200\n",
       "Name: United States, dtype: float64"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "full_country_stats[[\"GDP per capita\", 'Life satisfaction']].loc[\"United States\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "remove_indices = [0, 1, 6, 8, 33, 34, 35]\n",
    "keep_indices = list(set(range(36)) - set(remove_indices))\n",
    "\n",
    "sample_data = full_country_stats[[\"GDP per capita\", 'Life satisfaction']].iloc[keep_indices]\n",
    "missing_data = full_country_stats[[\"GDP per capita\", 'Life satisfaction']].iloc[remove_indices]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4.853052800266436, 4.911544589158484e-05)"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import linear_model\n",
    "lin1 = linear_model.LinearRegression()\n",
    "Xsample = np.c_[sample_data[\"GDP per capita\"]]\n",
    "ysample = np.c_[sample_data[\"Life satisfaction\"]]\n",
    "lin1.fit(Xsample, ysample)\n",
    "t0, t1 = lin1.intercept_[0], lin1.coef_[0][0]\n",
    "t0, t1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving figure best_fit_model_plot\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sample_data.plot(kind='scatter', x=\"GDP per capita\", y='Life satisfaction', figsize=(5,3))\n",
    "plt.axis([0, 60000, 0, 10])\n",
    "X=np.linspace(0, 60000, 1000)\n",
    "plt.plot(X, t0 + t1*X, \"b\")\n",
    "plt.text(5000, 3.1, r\"$\\theta_0 = 4.85$\", fontsize=14, color=\"b\")\n",
    "plt.text(5000, 2.2, r\"$\\theta_1 = 4.91 \\times 10^{-5}$\", fontsize=14, color=\"b\")\n",
    "save_fig('best_fit_model_plot')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[5.96242338]]\n"
     ]
    }
   ],
   "source": [
    "X = np.c_[sample_data[\"GDP per capita\"]]\n",
    "y = np.c_[sample_data[\"Life satisfaction\"]]\n",
    "\n",
    "# Visualize the data, GDP per capita is key index \n",
    "sample_data.plot(kind='scatter', x=\"GDP per capita\", y='Life satisfaction')\n",
    "plt.show()\n",
    "\n",
    "# Select a linear model\n",
    "model = sklearn.linear_model.LinearRegression()\n",
    "\n",
    "# Train the model\n",
    "model.fit(X, y)\n",
    "\n",
    "# Make a prediction for Cyprus, if \"GDP per capita\" was 22587 what will be \"life satisfaction\"\n",
    "X_new = [[22587]]  # Cyprus' GDP per capita\n",
    "print(model.predict(X_new)) # outputs [[ 5.96242338]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[5.76666667]]\n"
     ]
    }
   ],
   "source": [
    "# with this k-neighbors regression model:\n",
    "import sklearn.neighbors\n",
    "model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=3)\n",
    "\n",
    "X = np.c_[country_stats[\"GDP per capita\"]]\n",
    "y = np.c_[country_stats[\"Life satisfaction\"]]\n",
    "\n",
    "# Train the model\n",
    "model.fit(X, y)\n",
    "\n",
    "# Make a prediction for Cyprus\n",
    "X_new = np.array([[22587.0]])  # Cyprus' GDP per capita\n",
    "print(model.predict(X_new)) # outputs [[ 5.76666667]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample_data.to_csv(os.path.join(\"datasets\", \"lifesat\", \"lifesat.csv\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Saving figure money_happy_scatterplot\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x216 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sample_data.plot(kind='scatter', x=\"GDP per capita\", y='Life satisfaction', figsize=(5,3))\n",
    "plt.axis([0, 60000, 0, 10])\n",
    "position_text = {\n",
    "    \"Hungary\": (5000, 1),\n",
    "    \"Korea\": (18000, 1.7),\n",
    "    \"France\": (29000, 2.4),\n",
    "    \"Australia\": (40000, 3.0),\n",
    "    \"United States\": (52000, 3.8),\n",
    "}\n",
    "for country, pos_text in position_text.items():\n",
    "    pos_data_x, pos_data_y = sample_data.loc[country]\n",
    "    country = \"U.S.\" if country == \"United States\" else country\n",
    "    plt.annotate(country, xy=(pos_data_x, pos_data_y), xytext=pos_text,\n",
    "            arrowprops=dict(facecolor='black', width=0.5, shrink=0.1, headwidth=5))\n",
    "    plt.plot(pos_data_x, pos_data_y, \"ro\")\n",
    "save_fig('money_happy_scatterplot')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  },
  "nav_menu": {},
  "toc": {
   "navigate_menu": true,
   "number_sections": true,
   "sideBar": true,
   "threshold": 6,
   "toc_cell": false,
   "toc_section_display": "block",
   "toc_window_display": true
  },
  "toc_position": {
   "height": "616px",
   "left": "0px",
   "right": "20px",
   "top": "106px",
   "width": "213px"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
